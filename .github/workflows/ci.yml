name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Ubuntu 22.04 for Python 3.7 (last supported version)
          - os: ubuntu-22.04
            python-version: '3.7'
          # Ubuntu 24.04 for modern Python versions
          - os: ubuntu-latest
            python-version: '3.8'
          - os: ubuntu-latest
            python-version: '3.9'
          - os: ubuntu-latest
            python-version: '3.10'
          - os: ubuntu-latest
            python-version: '3.11'
          - os: ubuntu-latest
            python-version: '3.12'
          # Windows and macOS for key versions
          - os: windows-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.11'
          - os: macOS-latest
            python-version: '3.9'
          - os: macOS-latest
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # No external dependencies required for core functionality

    - name: Verify project structure
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python get_version.py
        python -c "import os; print('\\n'.join(os.listdir('.')))"

    - name: Run tests
      run: |
        python tests/run_tests.py

    - name: Test CLI functionality
      run: |
        python src/texterify_processor.py --version
        python src/texterify_processor.py --help

    - name: Test with sample file
      run: |
        # Test the sample export processing
        echo "2" | python src/texterify_processor.py examples/sample_texterify_export.zip || true
        echo "Test completed"

    - name: Test shell scripts (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/texterify-processor.sh
        scripts/texterify-processor.sh --version

    - name: Test PowerShell script (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        scripts/texterify-processor.ps1 -Version

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install code quality tools
      run: |
        pip install flake8 black isort

    - name: Run Black (formatter)
      run: |
        black --check --diff src/ tests/

    - name: Run isort (import sorter)
      run: |
        isort --check-only --diff src/ tests/

    - name: Run Flake8 (linter)
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify documentation
      run: |
        # Check that all required documentation exists
        test -f README.md
        test -f LICENSE
        test -f docs/USAGE.md
        test -f examples/README.md
        
        # Check that version is consistent
        python get_version.py > /tmp/version.txt
        grep -q "$(cat /tmp/version.txt)" README.md

    - name: Check links in documentation
      run: |
        # Basic check that common files are referenced
        grep -q "LICENSE" README.md
        grep -q "examples" README.md
        grep -q "tests" README.md

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit (security scanner)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

    - name: Run Safety (dependency scanner)
      run: |
        # Check for known security vulnerabilities
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: bandit-report.json
        retention-days: 7

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install performance testing tools
      run: |
        pip install memory-profiler psutil

    - name: Run performance tests
      run: |
        # Test memory usage and execution time
        echo "Testing performance with sample file..."
        time python src/texterify_processor.py --version
        echo "Performance test completed"

    - name: Memory usage test
      run: |
        # Test memory usage during processing
        python -c "
        import psutil
        import os
        process = psutil.Process(os.getpid())
        print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.2f} MB')
        "

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, performance]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Setup project
      run: |
        # Run project setup to verify environment
        python setup_project.py

    - name: Build Python package
      run: |
        # Build wheel and source distribution
        python -m build

    - name: Create portable distribution
      run: |
        # Create a distributable package for easy deployment
        mkdir -p dist
        tar -czf dist/texterify-language-processor.tar.gz \
          --exclude='.git*' \
          --exclude='dist' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='venv' \
          --exclude='.venv' \
          --exclude='build' \
          --exclude='*.egg-info' \
          .

    - name: Create Windows distribution
      run: |
        # Create a Windows-specific distribution
        mkdir -p dist/windows
        cp -r src/ dist/windows/
        cp -r scripts/ dist/windows/
        cp -r config/ dist/windows/
        cp -r examples/ dist/windows/
        cp *.py dist/windows/
        cp *.txt dist/windows/
        cp *.md dist/windows/
        cp LICENSE dist/windows/
        cd dist/windows
        zip -r ../texterify-language-processor-windows.zip .
        cd ../..

    - name: Verify distributions
      run: |
        # Verify the distributions were created correctly
        ls -la dist/
        file dist/texterify-language-processor.tar.gz
        file dist/texterify-language-processor-windows.zip
        echo "Distribution sizes:"
        du -h dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distribution
        path: dist/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Run integration tests
      run: |
        python tests/test_integration.py

    - name: Test real-world scenario
      run: |
        # Create a more complex test scenario
        mkdir -p integration_test
        cd integration_test
        
        # Copy sample files
        cp ../examples/sample_texterify_export.zip .
        cp ../examples/custom_config.json .
        
        # Test default processing
        echo "2" | python ../src/texterify_processor.py sample_texterify_export.zip
        
        # Test custom config
        echo "2" | python ../src/texterify_processor.py sample_texterify_export.zip --config custom_config.json
        
        # Verify outputs
        python -c "import glob; print('\\n'.join(glob.glob('*.zip')))"
        echo "Integration tests completed successfully"

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, code-quality, build, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distribution
        path: dist/

    - name: Deploy to development environment
      env:
        DEPLOYMENT_URL: ${{ secrets.DEV_DEPLOYMENT_URL }}
        API_KEY: ${{ secrets.DEV_API_KEY }}
      run: |
        echo "🚀 Deploying to development environment..."
        echo "📦 Artifacts available:"
        ls -la dist/
        
        # Example deployment logic (customize based on your needs):
        # 1. Upload to development server
        # curl -X POST "$DEPLOYMENT_URL/deploy" \
        #   -H "Authorization: Bearer $API_KEY" \
        #   -F "package=@dist/texterify-language-processor.tar.gz"
        
        # 2. Or publish to development package registry
        # pip install twine
        # twine upload --repository-url "$DEV_PYPI_URL" dist/*
        
        # 3. Or deploy to development server via SSH
        # scp dist/* user@dev-server:/path/to/deployment/
        
        echo "✅ Development deployment completed!"

  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: [test, code-quality, build, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: distribution
        path: dist/

    - name: Get version
      id: version
      run: |
        VERSION=$(python get_version.py)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Version: $VERSION"

    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ Release ${{ steps.version.outputs.tag }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ Release ${{ steps.version.outputs.tag }} will be created"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      if: steps.check_release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: "Texterify Language Processor ${{ steps.version.outputs.version }}"
        body: |
          ## 🚀 Texterify Language Processor ${{ steps.version.outputs.version }}
          
          ### 📦 What's Included
          - **Source Distribution**: `texterify language processor-${{ steps.version.outputs.version }}.tar.gz`
          - **Wheel Package**: `texterify_language_processor-${{ steps.version.outputs.version }}-py3-none-any.whl`
          - **Portable Archive**: `texterify-language-processor.tar.gz`
          - **Windows Package**: `texterify-language-processor-windows.zip`
          
          ### 🛠️ Installation
          ```bash
          # Install from wheel (recommended)
          pip install texterify_language_processor-${{ steps.version.outputs.version }}-py3-none-any.whl
          
          # Or install from source
          pip install "texterify language processor-${{ steps.version.outputs.version }}.tar.gz"
          ```
          
          ### 📋 Usage
          ```bash
          # Basic usage
          python -m texterify_processor "your_export.zip"
          
          # With custom config
          python -m texterify_processor "export.zip" --config "custom.json"
          ```
          
          ### ✅ CI/CD Status
          - ✅ All tests passed
          - ✅ Code quality checks passed
          - ✅ Security scan completed
          - ✅ Performance tests passed
          - ✅ Integration tests passed
          
          **Full Changelog**: https://github.com/ecamlioglu/texterify-language-processor/compare/${{ github.event.before }}...${{ github.sha }}
        files: |
          dist/texterify language processor-${{ steps.version.outputs.version }}.tar.gz
          dist/texterify_language_processor-${{ steps.version.outputs.version }}-py3-none-any.whl
          dist/texterify-language-processor.tar.gz
          dist/texterify-language-processor-windows.zip
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Create GitHub Deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Automatic deployment of Texterify Language Processor ${{ steps.version.outputs.version }}',
            auto_merge: false,
            required_contexts: []
          });
          
          console.log('🚀 Created deployment:', deployment.data.id);
          
          // Mark deployment as successful
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            description: 'Deployment completed successfully',
            environment_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${{ steps.version.outputs.tag }}`
          });
          
          console.log('✅ Deployment marked as successful');
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Deployment Summary
      run: |
        echo "🎉 Deployment Summary:"
        echo "📦 Version: ${{ steps.version.outputs.version }}"
        echo "🏷️ Tag: ${{ steps.version.outputs.tag }}"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
        echo "📊 Deployment Status: https://github.com/${{ github.repository }}/deployments"

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test, code-quality, security, performance, build, integration-test, auto-release]
    if: always()
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.code-quality.result == 'success' && needs.security.result == 'success' && needs.performance.result == 'success' && needs.build.result == 'success' && needs.integration-test.result == 'success'
      run: |
        echo "✅ All CI/CD checks passed successfully!"
        if [ "${{ needs.auto-release.result }}" == "success" ]; then
          echo "🚀 Automatic release and deployment completed!"
          echo "📦 Check the releases page for download links"
        else
          echo "📦 Build artifacts are ready for deployment"
        fi

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.code-quality.result == 'failure' || needs.security.result == 'failure' || needs.performance.result == 'failure' || needs.build.result == 'failure' || needs.integration-test.result == 'failure'
      run: |
        echo "❌ CI/CD pipeline failed!"
        echo "Failed jobs:"
        echo "- Test: ${{ needs.test.result }}"
        echo "- Code Quality: ${{ needs.code-quality.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Performance: ${{ needs.performance.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Integration Test: ${{ needs.integration-test.result }}"
        echo "- Auto Release: ${{ needs.auto-release.result }}"
        exit 1
